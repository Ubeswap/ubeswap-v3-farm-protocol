{
  "address": "0xA6E9069CB055a425Eb41D185b740B22Ec8f51853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "_nonfungiblePositionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxIncentiveStartLeadTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIncentivePeriodDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxLockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "DepositTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "refund",
          "type": "uint128"
        }
      ],
      "name": "ExcessRewardsRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "ExternalRewardCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount0Max",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount1Max",
          "type": "uint128"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IUniswapV3Pool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "lockTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "minimumTickRange",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "maxTickLower",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "minTickLower",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "maxTickUpper",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "minTickUpper",
          "type": "int24"
        }
      ],
      "name": "IncentiveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newPeriodId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "reward",
          "type": "uint128"
        }
      ],
      "name": "IncentiveExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newPeriodId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "distributedRewardsSinceLastUpdate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "activeTvlNative",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "externalTvlNative",
          "type": "uint128"
        }
      ],
      "name": "IncentiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "periodId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "reward",
          "type": "uint128"
        }
      ],
      "name": "PeriodRewardIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "initialSecondsInside",
          "type": "uint32"
        }
      ],
      "name": "TokenStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        }
      ],
      "name": "TokenUnstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_UPDATER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DISTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        }
      ],
      "name": "collectExternalReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount0Max",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount1Max",
              "type": "uint128"
            }
          ],
          "internalType": "struct INonfungiblePositionManager.CollectParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "collectFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "accumulatedRewards",
          "type": "uint128"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "collectReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "reward",
          "type": "uint128"
        }
      ],
      "name": "createIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "numberOfStakes",
          "type": "uint48"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "newPeriodId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "reward",
          "type": "uint128"
        }
      ],
      "name": "extendIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalRewardDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "getAccumulatedReward",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "accumulatedReward",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "lastPeriodId",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStakedTokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "incentivePeriods",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "rewardPerSecond",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "incentives",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "currentPeriodId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lastUpdateTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numberOfStakes",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "distributedRewards",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "excessRewards",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "externalRewards",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "periodId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "reward",
          "type": "uint128"
        }
      ],
      "name": "increasePeriodReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIncentivePeriodDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIncentiveStartLeadTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonfungiblePositionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        }
      ],
      "name": "refundExcessRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "claimedReward",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "stakeTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "initialSecondsInside",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "minimumTickRange",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "maxTickUpper",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "minTickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct IUbeswapV3Farming.IncentiveKey",
          "name": "key",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "updateExternalRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "incentiveId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "distributedRewardsSinceLastUpdate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "activeTvlNative",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "externalTvlNative",
          "type": "uint128"
        }
      ],
      "name": "updateIncentiveDistributionInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d81f7c230fb20fa56fd523ebe8a2191357f548e0f95a9447c330dfdeaaf3bb6",
  "receipt": {
    "to": null,
    "from": "0x2c2bc76B97BCe84A5a9c6e2835AB13306B964cf1",
    "contractAddress": "0xA6E9069CB055a425Eb41D185b740B22Ec8f51853",
    "transactionIndex": 6,
    "gasUsed": "5414378",
    "logsBloom": "0x
    "blockHash": "0x3abb411c90c7f17906426008497b08065c527e8ec6a6f7d763e57481ecb3988c",
    "transactionHash": "0x9d81f7c230fb20fa56fd523ebe8a2191357f548e0f95a9447c330dfdeaaf3bb6",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 27485440,
        "transactionHash": "0x9d81f7c230fb20fa56fd523ebe8a2191357f548e0f95a9447c330dfdeaaf3bb6",
        "address": "0xA6E9069CB055a425Eb41D185b740B22Ec8f51853",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x3abb411c90c7f17906426008497b08065c527e8ec6a6f7d763e57481ecb3988c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 27485440,
        "transactionHash": "0x9d81f7c230fb20fa56fd523ebe8a2191357f548e0f95a9447c330dfdeaaf3bb6",
        "address": "0xA6E9069CB055a425Eb41D185b740B22Ec8f51853",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x3bd2f1998541a778f2b17a84ff608b734af3ddf06cc43506453ef362dcdf17f1",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x3abb411c90c7f17906426008497b08065c527e8ec6a6f7d763e57481ecb3988c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 27485440,
        "transactionHash": "0x9d81f7c230fb20fa56fd523ebe8a2191357f548e0f95a9447c330dfdeaaf3bb6",
        "address": "0xA6E9069CB055a425Eb41D185b740B22Ec8f51853",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x892ea130fd6e079bb8cd940bf44abb9be25498d6f215492fb15067ef238b2d58",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x3abb411c90c7f17906426008497b08065c527e8ec6a6f7d763e57481ecb3988c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 27485440,
        "transactionHash": "0x9d81f7c230fb20fa56fd523ebe8a2191357f548e0f95a9447c330dfdeaaf3bb6",
        "address": "0xA6E9069CB055a425Eb41D185b740B22Ec8f51853",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b449",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1",
          "0x0000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x3abb411c90c7f17906426008497b08065c527e8ec6a6f7d763e57481ecb3988c"
      }
    ],
    "blockNumber": 27485440,
    "cumulativeGasUsed": "5720532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67FEa58D5a5a4162cED847E13c2c81c73bf8aeC4",
    "0x897387c7B996485c3AAa85c94272Cd6C506f8c8F",
    604800,
    7776000,
    7776000
  ],
  "numDeployments": 4,
  "solcInputHash": "0b9f3be7b17619692edb3880d3ad50e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"_nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncentiveStartLeadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncentivePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"DepositTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"refund\",\"type\":\"uint128\"}],\"name\":\"ExcessRewardsRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ExternalRewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"name\":\"IncentiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPeriodId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"name\":\"IncentiveExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPeriodId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"distributedRewardsSinceLastUpdate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"activeTvlNative\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"externalTvlNative\",\"type\":\"uint128\"}],\"name\":\"IncentiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"periodId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"name\":\"PeriodRewardIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"initialSecondsInside\",\"type\":\"uint32\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"collectExternalReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"accumulatedRewards\",\"type\":\"uint128\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"name\":\"createIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"numberOfStakes\",\"type\":\"uint48\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"newPeriodId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"name\":\"extendIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalRewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"getAccumulatedReward\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"accumulatedReward\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastPeriodId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakedTokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"incentivePeriods\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"incentives\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"currentPeriodId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numberOfStakes\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"distributedRewards\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"excessRewards\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"externalRewards\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"periodId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"name\":\"increasePeriodReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIncentivePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIncentiveStartLeadTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"refundExcessRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"claimedReward\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stakeTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initialSecondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"minimumTickRange\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"minTickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IUbeswapV3Farming.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateExternalRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"distributedRewardsSinceLastUpdate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"activeTvlNative\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"externalTvlNative\",\"type\":\"uint128\"}],\"name\":\"updateIncentiveDistributionInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"DepositTransferred(uint256,address,address)\":{\"params\":{\"newOwner\":\"The owner after the deposit was transferred\",\"oldOwner\":\"The owner before the deposit was transferred\",\"tokenId\":\"The ID of the deposit (and token) that is being transferred\"}},\"ExcessRewardsRefunded(bytes32,uint128)\":{\"params\":{\"incentiveId\":\"The incentive which has excess rewards\"}},\"ExternalRewardCollected(bytes32,address,uint256)\":{\"params\":{\"incentiveId\":\"The incentive\",\"reward\":\"The amount of reward tokens claimed\",\"to\":\"externalRewardDistributor address at the time on transaction\"}},\"FeeCollected(address,uint256,address,uint128,uint128)\":{\"params\":{\"owner\":\"Owner account of the deposited token when the fee collected\",\"recipient\":\"Fee recepient\",\"tokenId\":\"The unique identifier of an Ubeswap V3 LP token\"}},\"IncentiveCreated(bytes32,address,address,uint32,uint32,int24,int24,int24,int24,int24)\":{\"params\":{\"lockTime\":\"Minimum time that is required for unstaking a position\",\"maxTickLower\":\"Maximum value of tickLower for a position to be staked\",\"maxTickUpper\":\"Maximum value of tickUpper for a position to be staked\",\"minTickLower\":\"Minimum value of tickLower for a position to be staked\",\"minTickUpper\":\"Minimum value of tickUpper for a position to be staked\",\"minimumTickRange\":\"Minimum value of (tickUpper - tickLower) for a position to be staked\",\"pool\":\"The Uniswap V3 compatible pool\",\"rewardToken\":\"The token being distributed as a reward\",\"startTime\":\"The time when the incentive program begins\"}},\"RewardCollected(uint256,bytes32,address,uint256)\":{\"params\":{\"incentiveId\":\"The incentive\",\"reward\":\"The amount of reward tokens claimed\",\"to\":\"The address where claimed rewards were sent to\",\"tokenId\":\"The unique identifier of an Ubeswap V3 LP token\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TokenStaked(uint256,bytes32,uint128,uint32)\":{\"params\":{\"incentiveId\":\"The incentive in which the token is staking\",\"liquidity\":\"The amount of liquidity staked\",\"tokenId\":\"The unique identifier of an Ubeswap V3 LP token\"}},\"TokenUnstaked(uint256,bytes32)\":{\"params\":{\"incentiveId\":\"The incentive in which the token is staking\",\"tokenId\":\"The unique identifier of an Ubeswap V3 LP token\"}}},\"kind\":\"dev\",\"methods\":{\"collectReward((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256,uint128,bytes32[])\":{\"params\":{\"accumulatedRewards\":\"accumulated rewards for the position\",\"key\":\"The key of the incentive for which to unstake the NFT\",\"proof\":\"Merkle proof for rewards\",\"tokenId\":\"The ID of the token that has rewards\"}},\"constructor\":{\"params\":{\"_factory\":\"the Uniswap V3 compatible factory\",\"_maxIncentivePeriodDuration\":\"the max amount of seconds into the future the incentive startTime can be set\",\"_maxIncentiveStartLeadTime\":\"the max duration of an incentive in seconds\",\"_nonfungiblePositionManager\":\"the NFT position manager contract address\"}},\"createIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint128)\":{\"params\":{\"duration\":\"The amount of seconds for the first period\",\"key\":\"Details of the incentive to create\",\"reward\":\"The amount of reward tokens to be distributed on the first period\"}},\"extendIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint32,uint128)\":{\"params\":{\"duration\":\"The amount of seconds for the new period\",\"key\":\"Details of the incentive to extend\",\"newPeriodId\":\"the id for the new period. It should be one more from the previous period. This is taken for security\",\"reward\":\"The amount of reward tokens to be distributed on the new period\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"refundExcessRewards((address,address,uint32,uint32,int24,int24,int24,int24,int24))\":{\"params\":{\"key\":\"Details of the incentive to end\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"stakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)\":{\"params\":{\"key\":\"The key of the incentive for which to stake the NFT\",\"tokenId\":\"The ID of the token to stake\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferDeposit(uint256,address)\":{\"params\":{\"to\":\"The new owner of the deposit\",\"tokenId\":\"The ID of the token (and the deposit) to transfer\"}},\"unstakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)\":{\"params\":{\"key\":\"The key of the incentive for which to unstake the NFT\",\"tokenId\":\"The ID of the token to unstake\"}},\"updateIncentiveDistributionInfo(bytes32,uint32,bytes32,bytes32,uint128,uint128,uint128)\":{\"params\":{\"incentiveId\":\"The ID of the incentive to be updated\",\"timestamp\":\"The timestamp of the block that the calculation is done on\"}},\"withdrawToken(uint256,address,bytes)\":{\"params\":{\"data\":\"An optional data array that will be passed along to the `to` address via the NFT safeTransferFrom\",\"to\":\"The address where the LP token will be sent\",\"tokenId\":\"The unique identifier of an Ubeswap V3 LP token\"}}},\"stateVariables\":{\"deposits\":{\"details\":\"deposits[tokenId] => Deposit\"},\"incentivePeriods\":{\"details\":\"incentivePeriods[incentiveId][periodId] => IncentivePeriod\"},\"incentives\":{\"details\":\"bytes32 refers to the return value of IncentiveId.compute\"},\"stakes\":{\"details\":\"stakes[incentiveId][tokenId] => Stake\"}},\"title\":\"Off-chain assisted Ubeswap V3 Farming Protocol\",\"version\":1},\"userdoc\":{\"events\":{\"DepositTransferred(uint256,address,address)\":{\"notice\":\"Emitted when ownership of a deposit changes\"},\"ExcessRewardsRefunded(bytes32,uint128)\":{\"notice\":\"Event that can be emitted when excess rewards refunded\"},\"ExternalRewardCollected(bytes32,address,uint256)\":{\"notice\":\"Event emitted when externalRewardDistributor contract collects reward\"},\"FeeCollected(address,uint256,address,uint128,uint128)\":{\"notice\":\"Event emitted when a fee collected from a pool\"},\"IncentiveCreated(bytes32,address,address,uint32,uint32,int24,int24,int24,int24,int24)\":{\"notice\":\"Event emitted when a liquidity mining incentive has been created\"},\"RewardCollected(uint256,bytes32,address,uint256)\":{\"notice\":\"Event emitted when a reward collected for an incentive\"},\"TokenStaked(uint256,bytes32,uint128,uint32)\":{\"notice\":\"Event emitted when a Ubeswap V3 LP token has been staked\"},\"TokenUnstaked(uint256,bytes32)\":{\"notice\":\"Event emitted when a Ubeswap V3 LP token has been unstaked\"}},\"kind\":\"user\",\"methods\":{\"collectExternalReward((address,address,uint32,uint32,int24,int24,int24,int24,int24))\":{\"notice\":\"Transfers the rewards that are accumulated for the external reward distributor\"},\"collectReward((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256,uint128,bytes32[])\":{\"notice\":\"Transfers the rewards that are accumulated for the token in the incentive\"},\"createIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint128)\":{\"notice\":\"Creates a new liquidity mining incentive program\"},\"extendIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint32,uint128)\":{\"notice\":\"Creates a new period for the incentive\"},\"externalRewardDistributor()\":{\"notice\":\"Address of the external reward distributor for the liquidity managers\"},\"factory()\":{\"notice\":\"The Uniswap V3 compatible Factory\"},\"increasePeriodReward((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint128)\":{\"notice\":\"Add reward for already created and not started period\"},\"maxIncentivePeriodDuration()\":{\"notice\":\"The max duration of an incentive in seconds\"},\"maxIncentiveStartLeadTime()\":{\"notice\":\"The max amount of seconds into the future the incentive startTime can be set\"},\"maxLockTime()\":{\"notice\":\"The max duration oc lock time that can be given to an incentive\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"nonfungiblePositionManager()\":{\"notice\":\"The nonfungible position manager with which this staking contract is compatible\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Upon receiving a Ubeswap V3 ERC721, creates the token deposit setting owner to `from`. Also stakes token in one or more incentives if properly formatted `data` has a length > 0.\"},\"refundExcessRewards((address,address,uint32,uint32,int24,int24,int24,int24,int24))\":{\"notice\":\"Refunds excess rewards for the given incentive\"},\"stakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)\":{\"notice\":\"Stakes a Ubeswap V3 LP token\"},\"transferDeposit(uint256,address)\":{\"notice\":\"Transfers ownership of a deposit from the sender to the given recipient\"},\"unstakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)\":{\"notice\":\"Unstakes a Ubeswap V3 LP token\"},\"updateExternalRewardDistributor(address)\":{\"notice\":\"Update function for externalRewardDistributor\"},\"updateIncentiveDistributionInfo(bytes32,uint32,bytes32,bytes32,uint128,uint128,uint128)\":{\"notice\":\"Update function for total liqudity seconds that is calculated off-chain\"},\"withdrawToken(uint256,address,bytes)\":{\"notice\":\"Withdraws a Ubeswap V3 LP token `tokenId` from this contract to the recipient `to`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UbeswapV3Farming.sol\":\"UbeswapV3Farming\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Multicall_v4.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Taken from https://github.com/Uniswap/v4-periphery/blob/main/src/base/Multicall_v4.sol\\npragma solidity =0.8.26;\\n\\nimport { IMulticall_v4 } from './interfaces/IMulticall_v4.sol';\\n\\n/// @title Multicall_v4\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall_v4 is IMulticall_v4 {\\n    /// @inheritdoc IMulticall_v4\\n    function multicall(\\n        bytes[] calldata data\\n    ) external payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // bubble up the revert reason\\n                assembly {\\n                    revert(add(result, 0x20), mload(result))\\n                }\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0badcce27b5a18d680d37589d6a3d4ffee1c8d2f0657d64a1bd3ca44f85749a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UbeswapV3Farming.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.26;\\npragma abicoder v2;\\n\\nimport './interfaces/IUbeswapV3Farming.sol';\\nimport './libraries/IncentiveId.sol';\\nimport './libraries/NFTPositionInfo.sol';\\nimport './interfaces/uniswap/IUniswapV3Factory.sol';\\nimport './interfaces/uniswap/IUniswapV3Pool.sol';\\nimport './interfaces/uniswap/INonfungiblePositionManager.sol';\\nimport './Multicall_v4.sol';\\nimport './libraries/KnownLengthSet.sol';\\n\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/// @title Off-chain assisted Ubeswap V3 Farming Protocol\\ncontract UbeswapV3Farming is IUbeswapV3Farming, AccessControl, Multicall_v4 {\\n    using KnownLengthSet for KnownLengthSet.UintSet;\\n\\n    bytes32 public constant INCENTIVE_MANAGER_ROLE = keccak256('INCENTIVE_MANAGER_ROLE');\\n    bytes32 public constant INCENTIVE_UPDATER_ROLE = keccak256('INCENTIVE_UPDATER_ROLE');\\n    bytes32 public constant REWARD_DISTRIBUTOR_ROLE = keccak256('REWARD_DISTRIBUTOR_ROLE');\\n\\n    /// @notice Represents a staking incentive\\n    struct Incentive {\\n        uint32 currentPeriodId;\\n        uint32 lastUpdateTime;\\n        uint32 endTime;\\n        uint32 numberOfStakes;\\n        uint128 distributedRewards;\\n        // -----------\\n        bytes32 merkleRoot;\\n        // -----------\\n        bytes32 ipfsHash;\\n        // -----------\\n        uint128 excessRewards;\\n        uint128 externalRewards;\\n    }\\n\\n    struct IncentivePeriod {\\n        uint128 rewardPerSecond;\\n        uint32 startTime;\\n        uint32 endTime;\\n    }\\n\\n    /// @notice Represents the deposit of a liquidity NFT\\n    struct Deposit {\\n        address owner;\\n        uint48 numberOfStakes;\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    /// @notice Represents a staked liquidity NFT\\n    struct Stake {\\n        uint128 claimedReward;\\n        uint32 stakeTime;\\n        uint32 initialSecondsInside;\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    IUniswapV3Factory public immutable override factory;\\n    /// @inheritdoc IUbeswapV3Farming\\n    INonfungiblePositionManager public immutable override nonfungiblePositionManager;\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    uint256 public immutable override maxIncentiveStartLeadTime;\\n    /// @inheritdoc IUbeswapV3Farming\\n    uint256 public immutable override maxIncentivePeriodDuration;\\n    /// @inheritdoc IUbeswapV3Farming\\n    uint256 public immutable override maxLockTime;\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    address public override externalRewardDistributor;\\n\\n    /// @dev bytes32 refers to the return value of IncentiveId.compute\\n    mapping(bytes32 => Incentive) public override incentives;\\n\\n    /// @dev incentivePeriods[incentiveId][periodId] => IncentivePeriod\\n    mapping(bytes32 => mapping(uint32 => IncentivePeriod)) public override incentivePeriods;\\n\\n    /// @dev deposits[tokenId] => Deposit\\n    mapping(uint256 => Deposit) public override deposits;\\n\\n    /// @dev stakes[incentiveId][tokenId] => Stake\\n    mapping(bytes32 => mapping(uint256 => Stake)) public override stakes;\\n\\n    // incentiveId => staked tokens set\\n    mapping(bytes32 => KnownLengthSet.UintSet) private _stakedTokens;\\n\\n    /// @param _factory the Uniswap V3 compatible factory\\n    /// @param _nonfungiblePositionManager the NFT position manager contract address\\n    /// @param _maxIncentiveStartLeadTime the max duration of an incentive in seconds\\n    /// @param _maxIncentivePeriodDuration the max amount of seconds into the future the incentive startTime can be set\\n    constructor(\\n        IUniswapV3Factory _factory,\\n        INonfungiblePositionManager _nonfungiblePositionManager,\\n        uint256 _maxIncentiveStartLeadTime,\\n        uint256 _maxIncentivePeriodDuration,\\n        uint256 _maxLockTime\\n    ) {\\n        factory = _factory;\\n        nonfungiblePositionManager = _nonfungiblePositionManager;\\n        maxIncentiveStartLeadTime = _maxIncentiveStartLeadTime;\\n        maxIncentivePeriodDuration = _maxIncentivePeriodDuration;\\n        maxLockTime = _maxLockTime;\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(INCENTIVE_MANAGER_ROLE, msg.sender);\\n        _grantRole(INCENTIVE_UPDATER_ROLE, msg.sender);\\n        _grantRole(REWARD_DISTRIBUTOR_ROLE, msg.sender);\\n    }\\n\\n    function updateExternalRewardDistributor(\\n        address _new\\n    ) public override onlyRole(INCENTIVE_MANAGER_ROLE) {\\n        externalRewardDistributor = _new;\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function createIncentive(\\n        IncentiveKey memory key,\\n        uint32 duration,\\n        uint128 reward\\n    ) external override onlyRole(INCENTIVE_MANAGER_ROLE) {\\n        uint32 endTime = key.startTime + duration;\\n        require(reward > 0, 'reward must be positive');\\n        require(duration > 0, 'duration must be positive');\\n        require(block.timestamp <= key.startTime, 'startTime must be after now');\\n        require(\\n            key.startTime - block.timestamp <= maxIncentiveStartLeadTime,\\n            'start time too far into future'\\n        );\\n        require(duration <= maxIncentivePeriodDuration, 'incentive duration is too long');\\n        require(key.lockTime <= maxLockTime, 'wrong lock time');\\n        require(key.maxTickLower > key.minTickLower, 'wrong tickLower range');\\n        require(key.maxTickUpper > key.minTickUpper, 'wrong tickUpper range');\\n\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n\\n        require(incentives[incentiveId].endTime == 0, 'incentive already exists');\\n\\n        incentives[incentiveId].endTime = endTime;\\n        incentives[incentiveId].lastUpdateTime = key.startTime;\\n        incentivePeriods[incentiveId][0] = IncentivePeriod({\\n            rewardPerSecond: reward / duration,\\n            startTime: key.startTime,\\n            endTime: endTime\\n        });\\n\\n        SafeERC20.safeTransferFrom(key.rewardToken, msg.sender, address(this), reward);\\n\\n        emit IncentiveCreated(\\n            incentiveId,\\n            key.rewardToken,\\n            key.pool,\\n            key.startTime,\\n            key.lockTime,\\n            key.minimumTickRange,\\n            key.maxTickLower,\\n            key.minTickLower,\\n            key.maxTickUpper,\\n            key.minTickUpper\\n        );\\n        emit IncentiveExtended(incentiveId, 0, duration, reward);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function extendIncentive(\\n        IncentiveKey memory key,\\n        uint32 newPeriodId,\\n        uint32 duration,\\n        uint128 reward\\n    ) external override onlyRole(REWARD_DISTRIBUTOR_ROLE) {\\n        require(reward > 0, 'reward must be positive');\\n        require(duration > 0, 'duration must be positive');\\n        require(duration <= maxIncentivePeriodDuration, 'incentive duration is too long');\\n\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n        uint32 currentEndTime = incentives[incentiveId].endTime;\\n        require(currentEndTime > 0, 'non-existent incentive');\\n        require(incentives[incentiveId].currentPeriodId == (newPeriodId - 1), 'wrong period id');\\n\\n        uint32 newEndTime = currentEndTime + duration;\\n        incentivePeriods[incentiveId][newPeriodId] = IncentivePeriod({\\n            rewardPerSecond: reward / duration,\\n            startTime: currentEndTime,\\n            endTime: newEndTime\\n        });\\n        incentives[incentiveId].endTime = newEndTime;\\n\\n        SafeERC20.safeTransferFrom(key.rewardToken, msg.sender, address(this), reward);\\n\\n        emit IncentiveExtended(incentiveId, newPeriodId, duration, reward);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function increasePeriodReward(\\n        IncentiveKey memory key,\\n        uint32 periodId,\\n        uint128 reward\\n    ) external override onlyRole(REWARD_DISTRIBUTOR_ROLE) {\\n        require(reward > 0, 'reward must be positive');\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n        IncentivePeriod memory period = incentivePeriods[incentiveId][periodId];\\n        require(period.rewardPerSecond > 0, 'non-existent incentive or period');\\n        require(block.timestamp <= period.startTime, 'period is started');\\n\\n        period.rewardPerSecond += reward / (period.endTime - period.startTime);\\n        incentivePeriods[incentiveId][periodId] = period;\\n\\n        SafeERC20.safeTransferFrom(key.rewardToken, msg.sender, address(this), reward);\\n\\n        emit PeriodRewardIncreased(incentiveId, periodId, reward);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function getAccumulatedReward(\\n        bytes32 incentiveId,\\n        uint32 timestamp\\n    ) public view override returns (uint128 accumulatedReward, uint32 lastPeriodId) {\\n        uint32 currentPeriodId = incentives[incentiveId].currentPeriodId;\\n        uint32 lastUpdateTime = incentives[incentiveId].lastUpdateTime;\\n        lastPeriodId = currentPeriodId;\\n        IncentivePeriod memory currPeriod = incentivePeriods[incentiveId][currentPeriodId];\\n        accumulatedReward = 0;\\n        if (timestamp > currPeriod.endTime) {\\n            accumulatedReward = (currPeriod.endTime - lastUpdateTime) * currPeriod.rewardPerSecond;\\n            lastPeriodId += 1;\\n            IncentivePeriod memory nextPeriod = incentivePeriods[incentiveId][lastPeriodId];\\n            require(nextPeriod.rewardPerSecond > 0, 'next period not exists');\\n            require(timestamp <= nextPeriod.endTime, 'next period ended too');\\n            accumulatedReward += (timestamp - currPeriod.endTime) * nextPeriod.rewardPerSecond;\\n        } else {\\n            accumulatedReward = (timestamp - lastUpdateTime) * currPeriod.rewardPerSecond;\\n        }\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function updateIncentiveDistributionInfo(\\n        bytes32 incentiveId,\\n        uint32 timestamp,\\n        bytes32 merkleRoot,\\n        bytes32 ipfsHash,\\n        uint128 distributedRewardsSinceLastUpdate,\\n        uint128 activeTvlNative,\\n        uint128 externalTvlNative\\n    ) external override onlyRole(INCENTIVE_UPDATER_ROLE) {\\n        require(timestamp < block.timestamp, 'time must be before now');\\n        Incentive memory incentive = incentives[incentiveId];\\n        require(incentive.lastUpdateTime > 0, 'non-existent incentive');\\n        require(timestamp > incentive.lastUpdateTime, 'timestamp > lastUpdateTime');\\n\\n        (uint128 accumulatedReward, uint32 lastPeriodId) = getAccumulatedReward(\\n            incentiveId,\\n            timestamp\\n        );\\n\\n        uint128 tvlNative = activeTvlNative + externalTvlNative;\\n\\n        if (tvlNative == 0) {\\n            // this means, no rewards has been disributed, so rewards will be refunded later\\n            require(incentive.merkleRoot == merkleRoot, 'invalid merkleRoot');\\n            require(distributedRewardsSinceLastUpdate == 0, 'reward must be 0');\\n            incentive.excessRewards += accumulatedReward;\\n        } else {\\n            require(incentive.merkleRoot != merkleRoot, 'same merkleRoot');\\n            require(incentive.ipfsHash != ipfsHash, 'same ipfsHash');\\n            require(distributedRewardsSinceLastUpdate == accumulatedReward, 'invalid reward');\\n            incentive.externalRewards += uint128(\\n                (uint256(accumulatedReward) * uint256(externalTvlNative)) / uint256(tvlNative)\\n            );\\n        }\\n\\n        incentive.currentPeriodId = lastPeriodId;\\n        incentive.distributedRewards += accumulatedReward;\\n        incentive.lastUpdateTime = timestamp;\\n        incentive.merkleRoot = merkleRoot;\\n        incentive.ipfsHash = ipfsHash;\\n        incentives[incentiveId] = incentive;\\n\\n        emit IncentiveUpdated(\\n            incentiveId,\\n            timestamp,\\n            incentive.currentPeriodId,\\n            merkleRoot,\\n            ipfsHash,\\n            accumulatedReward,\\n            activeTvlNative,\\n            externalTvlNative\\n        );\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function refundExcessRewards(\\n        IncentiveKey memory key\\n    ) external override onlyRole(INCENTIVE_MANAGER_ROLE) {\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n        uint128 excessRewards = incentives[incentiveId].excessRewards;\\n\\n        require(excessRewards > 0, 'no excess rewards');\\n\\n        incentives[incentiveId].excessRewards = 0;\\n\\n        SafeERC20.safeTransfer(key.rewardToken, msg.sender, excessRewards);\\n\\n        emit ExcessRewardsRefunded(incentiveId, excessRewards);\\n    }\\n\\n    /// @notice Upon receiving a Ubeswap V3 ERC721, creates the token deposit setting owner to `from`. Also stakes token\\n    /// in one or more incentives if properly formatted `data` has a length > 0.\\n    /// @inheritdoc IERC721Receiver\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(msg.sender == address(nonfungiblePositionManager), 'not a univ3 nft');\\n\\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = nonfungiblePositionManager\\n            .positions(tokenId);\\n\\n        deposits[tokenId] = Deposit({\\n            owner: from,\\n            numberOfStakes: 0,\\n            tickLower: tickLower,\\n            tickUpper: tickUpper\\n        });\\n        emit DepositTransferred(tokenId, address(0), from);\\n\\n        if (data.length > 0) {\\n            if (data.length == 288) {\\n                _stakeToken(abi.decode(data, (IncentiveKey)), tokenId);\\n            } else {\\n                IncentiveKey[] memory keys = abi.decode(data, (IncentiveKey[]));\\n                for (uint256 i = 0; i < keys.length; i++) {\\n                    _stakeToken(keys[i], tokenId);\\n                }\\n            }\\n        }\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function transferDeposit(uint256 tokenId, address to) external override {\\n        require(to != address(this), 'cannot transfer to farm');\\n        require(to != address(0), 'invalid to address');\\n        address owner = deposits[tokenId].owner;\\n        require(owner == msg.sender, 'only owner can transfer');\\n        deposits[tokenId].owner = to;\\n        emit DepositTransferred(tokenId, owner, to);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function collectFee(\\n        INonfungiblePositionManager.CollectParams calldata params\\n    ) external payable override returns (uint256 amount0, uint256 amount1) {\\n        address owner = deposits[params.tokenId].owner;\\n        require(owner == msg.sender, 'only owner can collect');\\n        (amount0, amount1) = nonfungiblePositionManager.collect{ value: msg.value }(params);\\n        emit FeeCollected(\\n            msg.sender,\\n            params.tokenId,\\n            params.recipient,\\n            params.amount0Max,\\n            params.amount1Max\\n        );\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function withdrawToken(uint256 tokenId, address to, bytes memory data) external override {\\n        require(to != address(this), 'cannot withdraw to farm');\\n        require(to != address(0), 'invalid to address');\\n        Deposit memory deposit = deposits[tokenId];\\n        require(deposit.numberOfStakes == 0, 'token is staked');\\n        require(deposit.owner == msg.sender, 'only owner can withdraw');\\n\\n        delete deposits[tokenId];\\n        emit DepositTransferred(tokenId, deposit.owner, address(0));\\n\\n        nonfungiblePositionManager.safeTransferFrom(address(this), to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function stakeToken(IncentiveKey memory key, uint256 tokenId) external override {\\n        require(deposits[tokenId].owner == msg.sender, 'only owner can stake token');\\n\\n        _stakeToken(key, tokenId);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function unstakeToken(IncentiveKey memory key, uint256 tokenId) external override {\\n        require(deposits[tokenId].owner == msg.sender, 'only owner can unstake');\\n\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n        require(stakes[incentiveId][tokenId].stakeTime > 0, 'token not staked');\\n        Incentive memory incentive = incentives[incentiveId];\\n\\n        if (key.lockTime > 0) {\\n            require(\\n                key.lockTime < (block.timestamp - stakes[incentiveId][tokenId].stakeTime),\\n                'token locked'\\n            );\\n        }\\n\\n        _stakedTokens[incentiveId].remove(tokenId, incentive.numberOfStakes);\\n\\n        stakes[incentiveId][tokenId] = Stake({\\n            claimedReward: stakes[incentiveId][tokenId].claimedReward,\\n            stakeTime: 0,\\n            initialSecondsInside: 0\\n        });\\n\\n        deposits[tokenId].numberOfStakes--;\\n        incentives[incentiveId].numberOfStakes--;\\n\\n        emit TokenUnstaked(tokenId, incentiveId);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function collectReward(\\n        IncentiveKey memory key,\\n        uint256 tokenId,\\n        uint128 accumulatedRewards,\\n        bytes32[] memory proof\\n    ) external override {\\n        require(deposits[tokenId].owner == msg.sender, 'only owner can collect');\\n\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n\\n        bytes32 firstHash = keccak256(abi.encode(tokenId, accumulatedRewards));\\n        bytes32 leaf = keccak256(bytes.concat(firstHash));\\n\\n        require(\\n            MerkleProof.verify(proof, incentives[incentiveId].merkleRoot, leaf),\\n            'Invalid proof'\\n        );\\n\\n        uint256 reward = accumulatedRewards - stakes[incentiveId][tokenId].claimedReward;\\n        require(reward > 0, 'no rewards');\\n\\n        stakes[incentiveId][tokenId].claimedReward = accumulatedRewards;\\n\\n        SafeERC20.safeTransferFrom(key.rewardToken, address(this), msg.sender, reward);\\n\\n        emit RewardCollected(tokenId, incentiveId, msg.sender, reward);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function collectExternalReward(IncentiveKey memory key) external override {\\n        require(externalRewardDistributor == msg.sender, 'not externalRewardDistributor');\\n\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n        uint128 reward = incentives[incentiveId].externalRewards;\\n        require(reward > 0, 'no rewards');\\n\\n        incentives[incentiveId].externalRewards = 0;\\n\\n        SafeERC20.safeTransferFrom(key.rewardToken, address(this), msg.sender, reward);\\n\\n        emit ExternalRewardCollected(incentiveId, msg.sender, reward);\\n    }\\n\\n    /// @inheritdoc IUbeswapV3Farming\\n    function getStakedTokenByIndex(\\n        bytes32 incentiveId,\\n        uint256 index\\n    ) external view override returns (uint256) {\\n        return _stakedTokens[incentiveId].at(index);\\n    }\\n\\n    /// @dev Stakes a deposited token without doing an ownership check\\n    function _stakeToken(IncentiveKey memory key, uint256 tokenId) private {\\n        bytes32 incentiveId = IncentiveId.compute(key);\\n        uint32 endTime = incentives[incentiveId].endTime;\\n        uint32 numberOfStakes = incentives[incentiveId].numberOfStakes;\\n\\n        require(endTime > 0, 'non-existent incentive');\\n        require(\\n            block.timestamp >= key.startTime && block.timestamp < endTime,\\n            'incentive not active'\\n        );\\n        require(stakes[incentiveId][tokenId].stakeTime == 0, 'token already staked');\\n\\n        (IUniswapV3Pool pool, int24 tickLower, int24 tickUpper, uint128 liquidity) = NFTPositionInfo\\n            .getPositionInfo(factory, nonfungiblePositionManager, tokenId);\\n\\n        require(pool == key.pool, 'token pool is not the incentive pool');\\n        require(key.minimumTickRange <= (tickUpper - tickLower), 'wrong tick range');\\n        require(key.maxTickLower >= tickLower && key.minTickLower <= tickLower, 'wrong tickLower');\\n        require(key.maxTickUpper >= tickUpper && key.minTickUpper <= tickUpper, 'wrong tickUpper');\\n        require(liquidity > 0, 'cannot stake token with 0 liquidity');\\n\\n        _stakedTokens[incentiveId].add(tokenId, numberOfStakes);\\n\\n        deposits[tokenId].numberOfStakes++;\\n        incentives[incentiveId].numberOfStakes++;\\n\\n        (, , uint32 secondsInside) = pool.snapshotCumulativesInside(tickLower, tickUpper);\\n\\n        stakes[incentiveId][tokenId] = Stake({\\n            claimedReward: stakes[incentiveId][tokenId].claimedReward,\\n            stakeTime: uint32(block.timestamp),\\n            initialSecondsInside: secondsInside\\n        });\\n\\n        emit TokenStaked(tokenId, incentiveId, liquidity, secondsInside);\\n    }\\n}\\n\",\"keccak256\":\"0x9e00da257129a7b7f5b08e70f830c5fa5aa9b9a04dc2a795584a0b13dcac4705\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMulticall_v4.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Taken from https://github.com/Uniswap/v4-periphery/blob/main/src/interfaces/IMulticall_v4.sol\\npragma solidity =0.8.26;\\n\\n/// @title Multicall_v4 interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall_v4 {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0901668e61caabf3ab3ec8676456e4bfe4ecb294a93791a276c89e92f1cf1b51\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUbeswapV3Farming.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.26;\\npragma abicoder v2;\\n\\nimport './uniswap/IUniswapV3Factory.sol';\\nimport './uniswap/IUniswapV3Pool.sol';\\nimport './uniswap/INonfungiblePositionManager.sol';\\nimport './IMulticall_v4.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Ubeswap V3 Farming Interface\\n/// @notice Allows staking V3 nonfungible liquidity tokens in exchange for reward tokens\\ninterface IUbeswapV3Farming is IERC721Receiver, IMulticall_v4 {\\n    /// @param rewardToken The token being distributed as a reward\\n    /// @param pool The Uniswap V3 compatible pool\\n    /// @param startTime The time when the incentive program begins\\n    /// @param lockTime Minimum time that is required for unstaking a position\\n    /// @param minimumTickRange Minimum value of (tickUpper - tickLower) for a position to be staked\\n    /// @param maxTickLower Maximum value of tickLower for a position to be staked\\n    /// @param minTickLower Minimum value of tickLower for a position to be staked\\n    /// @param maxTickUpper Maximum value of tickUpper for a position to be staked\\n    /// @param minTickUpper Minimum value of tickUpper for a position to be staked\\n    struct IncentiveKey {\\n        IERC20 rewardToken;\\n        IUniswapV3Pool pool;\\n        uint32 startTime;\\n        uint32 lockTime;\\n        int24 minimumTickRange;\\n        int24 maxTickLower;\\n        int24 minTickLower;\\n        int24 maxTickUpper;\\n        int24 minTickUpper;\\n    }\\n\\n    /// @notice The Uniswap V3 compatible Factory\\n    function factory() external view returns (IUniswapV3Factory);\\n\\n    /// @notice The nonfungible position manager with which this staking contract is compatible\\n    function nonfungiblePositionManager() external view returns (INonfungiblePositionManager);\\n\\n    /// @notice The max amount of seconds into the future the incentive startTime can be set\\n    function maxIncentiveStartLeadTime() external view returns (uint256);\\n\\n    /// @notice The max duration of an incentive in seconds\\n    function maxIncentivePeriodDuration() external view returns (uint256);\\n\\n    /// @notice The max duration oc lock time that can be given to an incentive\\n    function maxLockTime() external view returns (uint256);\\n\\n    /// @notice Address of the external reward distributor for the liquidity managers\\n    function externalRewardDistributor() external view returns (address);\\n\\n    /// @notice Update function for externalRewardDistributor\\n    function updateExternalRewardDistributor(address _new) external;\\n\\n    /// @notice Represents a staking incentive\\n    /// @param incentiveId The ID of the incentive computed from its parameters\\n    /// @return currentPeriodId current reward distribution period id\\n    /// @return lastUpdateTime time of last update of cumulativeReward and IncentiveDistributionInfo\\n    /// @return endTime End time of incentive\\n    /// @return numberOfStakes Number of tokens that are staked on the incentive\\n    function incentives(\\n        bytes32 incentiveId\\n    )\\n        external\\n        view\\n        returns (\\n            uint32 currentPeriodId,\\n            uint32 lastUpdateTime,\\n            uint32 endTime,\\n            uint32 numberOfStakes,\\n            uint128 distributedRewards,\\n            bytes32 merkleRoot,\\n            bytes32 ipfsHash,\\n            uint128 excessRewards,\\n            uint128 externalRewards\\n        );\\n\\n    /// @notice\\n    function incentivePeriods(\\n        bytes32 incentiveId,\\n        uint32 periodId\\n    ) external view returns (uint128 rewardPerSecond, uint32 startTime, uint32 endTime);\\n\\n    /// @notice Returns information about a deposited NFT\\n    /// @return owner The owner of the deposited NFT\\n    /// @return numberOfStakes Counter of how many incentives for which the liquidity is staked\\n    /// @return tickLower The lower tick of the range\\n    /// @return tickUpper The upper tick of the range\\n    function deposits(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (address owner, uint48 numberOfStakes, int24 tickLower, int24 tickUpper);\\n\\n    /// @notice Returns information about a staked liquidity NFT\\n    /// @param incentiveId The ID of the incentive for which the token is staked\\n    /// @param tokenId The ID of the staked token\\n    function stakes(\\n        bytes32 incentiveId,\\n        uint256 tokenId\\n    ) external view returns (uint128 claimedReward, uint32 stakeTime, uint32 initialSecondsInside);\\n\\n    /// @notice Creates a new liquidity mining incentive program\\n    /// @param key Details of the incentive to create\\n    /// @param duration The amount of seconds for the first period\\n    /// @param reward The amount of reward tokens to be distributed on the first period\\n    function createIncentive(IncentiveKey memory key, uint32 duration, uint128 reward) external;\\n\\n    /// @notice Creates a new period for the incentive\\n    /// @param key Details of the incentive to extend\\n    /// @param newPeriodId the id for the new period. It should be one more from the previous period. This is taken for security\\n    /// @param duration The amount of seconds for the new period\\n    /// @param reward The amount of reward tokens to be distributed on the new period\\n    function extendIncentive(\\n        IncentiveKey memory key,\\n        uint32 newPeriodId,\\n        uint32 duration,\\n        uint128 reward\\n    ) external;\\n\\n    /// @notice Add reward for already created and not started period\\n    function increasePeriodReward(\\n        IncentiveKey memory key,\\n        uint32 periodId,\\n        uint128 reward\\n    ) external;\\n\\n    function getAccumulatedReward(\\n        bytes32 incentiveId,\\n        uint32 timestamp\\n    ) external view returns (uint128 accumulatedReward, uint32 lastPeriodId);\\n\\n    /// @notice Update function for total liqudity seconds that is calculated off-chain\\n    /// @param incentiveId The ID of the incentive to be updated\\n    /// @param timestamp The timestamp of the block that the calculation is done on\\n    function updateIncentiveDistributionInfo(\\n        bytes32 incentiveId,\\n        uint32 timestamp,\\n        bytes32 merkleRoot,\\n        bytes32 ipfsHash,\\n        uint128 distributedRewardsSinceLastUpdate,\\n        uint128 activeTvlNative,\\n        uint128 externalTvlNative\\n    ) external;\\n\\n    /// @notice Refunds excess rewards for the given incentive\\n    /// @param key Details of the incentive to end\\n    function refundExcessRewards(IncentiveKey memory key) external;\\n\\n    /// @notice Transfers ownership of a deposit from the sender to the given recipient\\n    /// @param tokenId The ID of the token (and the deposit) to transfer\\n    /// @param to The new owner of the deposit\\n    function transferDeposit(uint256 tokenId, address to) external;\\n\\n    /// @notice\\n    function collectFee(\\n        INonfungiblePositionManager.CollectParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Withdraws a Ubeswap V3 LP token `tokenId` from this contract to the recipient `to`\\n    /// @param tokenId The unique identifier of an Ubeswap V3 LP token\\n    /// @param to The address where the LP token will be sent\\n    /// @param data An optional data array that will be passed along to the `to` address via the NFT safeTransferFrom\\n    function withdrawToken(uint256 tokenId, address to, bytes memory data) external;\\n\\n    /// @notice Stakes a Ubeswap V3 LP token\\n    /// @param key The key of the incentive for which to stake the NFT\\n    /// @param tokenId The ID of the token to stake\\n    function stakeToken(IncentiveKey memory key, uint256 tokenId) external;\\n\\n    /// @notice Unstakes a Ubeswap V3 LP token\\n    /// @param key The key of the incentive for which to unstake the NFT\\n    /// @param tokenId The ID of the token to unstake\\n    function unstakeToken(IncentiveKey memory key, uint256 tokenId) external;\\n\\n    /// @notice Transfers the rewards that are accumulated for the token in the incentive\\n    /// @param key The key of the incentive for which to unstake the NFT\\n    /// @param tokenId The ID of the token that has rewards\\n    /// @param accumulatedRewards accumulated rewards for the position\\n    /// @param proof Merkle proof for rewards\\n    function collectReward(\\n        IncentiveKey memory key,\\n        uint256 tokenId,\\n        uint128 accumulatedRewards,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    /// @notice Transfers the rewards that are accumulated for the external reward distributor\\n    function collectExternalReward(IncentiveKey memory key) external;\\n\\n    function getStakedTokenByIndex(\\n        bytes32 incentiveId,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /// @notice Event emitted when a liquidity mining incentive has been created\\n    /// @param rewardToken The token being distributed as a reward\\n    /// @param pool The Uniswap V3 compatible pool\\n    /// @param startTime The time when the incentive program begins\\n    /// @param lockTime Minimum time that is required for unstaking a position\\n    /// @param minimumTickRange Minimum value of (tickUpper - tickLower) for a position to be staked\\n    /// @param maxTickLower Maximum value of tickLower for a position to be staked\\n    /// @param minTickLower Minimum value of tickLower for a position to be staked\\n    /// @param maxTickUpper Maximum value of tickUpper for a position to be staked\\n    /// @param minTickUpper Minimum value of tickUpper for a position to be staked\\n    event IncentiveCreated(\\n        bytes32 indexed incentiveId,\\n        IERC20 indexed rewardToken,\\n        IUniswapV3Pool indexed pool,\\n        uint32 startTime,\\n        uint32 lockTime,\\n        int24 minimumTickRange,\\n        int24 maxTickLower,\\n        int24 minTickLower,\\n        int24 maxTickUpper,\\n        int24 minTickUpper\\n    );\\n\\n    /// @notice\\n    event IncentiveExtended(\\n        bytes32 indexed incentiveId,\\n        uint32 newPeriodId,\\n        uint32 duration,\\n        uint128 reward\\n    );\\n\\n    /// @notice\\n    event PeriodRewardIncreased(bytes32 indexed incentiveId, uint32 periodId, uint128 reward);\\n\\n    /// @notice\\n    event IncentiveUpdated(\\n        bytes32 indexed incentiveId,\\n        uint32 timestamp,\\n        uint32 newPeriodId,\\n        bytes32 merkleRoot,\\n        bytes32 ipfsHash,\\n        uint128 distributedRewardsSinceLastUpdate,\\n        uint128 activeTvlNative,\\n        uint128 externalTvlNative\\n    );\\n\\n    /// @notice Event that can be emitted when excess rewards refunded\\n    /// @param incentiveId The incentive which has excess rewards\\n    event ExcessRewardsRefunded(bytes32 indexed incentiveId, uint128 refund);\\n\\n    /// @notice Emitted when ownership of a deposit changes\\n    /// @param tokenId The ID of the deposit (and token) that is being transferred\\n    /// @param oldOwner The owner before the deposit was transferred\\n    /// @param newOwner The owner after the deposit was transferred\\n    event DepositTransferred(\\n        uint256 indexed tokenId,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Event emitted when a Ubeswap V3 LP token has been staked\\n    /// @param tokenId The unique identifier of an Ubeswap V3 LP token\\n    /// @param liquidity The amount of liquidity staked\\n    /// @param incentiveId The incentive in which the token is staking\\n    event TokenStaked(\\n        uint256 indexed tokenId,\\n        bytes32 indexed incentiveId,\\n        uint128 liquidity,\\n        uint32 initialSecondsInside\\n    );\\n\\n    /// @notice Event emitted when a Ubeswap V3 LP token has been unstaked\\n    /// @param tokenId The unique identifier of an Ubeswap V3 LP token\\n    /// @param incentiveId The incentive in which the token is staking\\n    event TokenUnstaked(uint256 indexed tokenId, bytes32 indexed incentiveId);\\n\\n    /// @notice Event emitted when a reward collected for an incentive\\n    /// @param tokenId The unique identifier of an Ubeswap V3 LP token\\n    /// @param incentiveId The incentive\\n    /// @param to The address where claimed rewards were sent to\\n    /// @param reward The amount of reward tokens claimed\\n    event RewardCollected(\\n        uint256 indexed tokenId,\\n        bytes32 indexed incentiveId,\\n        address indexed to,\\n        uint256 reward\\n    );\\n\\n    /// @notice Event emitted when externalRewardDistributor contract collects reward\\n    /// @param incentiveId The incentive\\n    /// @param to externalRewardDistributor address at the time on transaction\\n    /// @param reward The amount of reward tokens claimed\\n    event ExternalRewardCollected(bytes32 indexed incentiveId, address to, uint256 reward);\\n\\n    /// @notice Event emitted when a fee collected from a pool\\n    /// @param owner Owner account of the deposited token when the fee collected\\n    /// @param tokenId The unique identifier of an Ubeswap V3 LP token\\n    /// @param recipient Fee recepient\\n    event FeeCollected(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        address recipient,\\n        uint128 amount0Max,\\n        uint128 amount1Max\\n    );\\n}\\n\",\"keccak256\":\"0x73938bc6924dedc327db4702a4d4ce6c2ba3bb9b676de5b00a393eacc4386139\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(\\n        uint256 indexed tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(\\n        uint256 indexed tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        payable\\n        returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams calldata params\\n    ) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        CollectParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x979541f509560e33f6900835c68db44a021506bd36d500f0879e9daf863b6dbd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;\\n}\\n\",\"keccak256\":\"0xa8254ccb471e0abd1d296464779fb690cec6bc72586d24eaf073a8fd3601a803\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0x9c0f7d0888bb8ec0997360f0f4172fde5da4e58d31be86a331a789b75eadabe9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{}\\n\",\"keccak256\":\"0x70f713cbd00ff0c90dbc61aa091e7c2129ae6cc1e1a8def9d76dfa427f715612\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/IncentiveId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.26;\\npragma abicoder v2;\\n\\nimport '../interfaces/IUbeswapV3Farming.sol';\\n\\nlibrary IncentiveId {\\n    /// @notice Calculate the key for a staking incentive\\n    /// @param key The components used to compute the incentive identifier\\n    /// @return incentiveId The identifier for the incentive\\n    function compute(\\n        IUbeswapV3Farming.IncentiveKey memory key\\n    ) internal pure returns (bytes32 incentiveId) {\\n        return keccak256(abi.encode(key));\\n    }\\n}\\n\",\"keccak256\":\"0x25c402c1f9c533132e6557afb1e878c34b904549b8f5d56f11145314fce7187b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/KnownLengthSet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.26;\\n\\n/**\\n * @dev This is like EnumerableSet\\n * But it doesn't use arrays for gas efficiency\\n * It gets length of the set from outside\\n */\\nlibrary KnownLengthSet {\\n    struct UintSet {\\n        // index => value\\n        mapping(uint256 => uint256) _values;\\n        // value => index\\n        mapping(uint256 => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not already present.\\n     */\\n    function add(\\n        UintSet storage set,\\n        uint256 value,\\n        uint256 currentLength\\n    ) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values[currentLength] = value;\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = currentLength + 1;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was present.\\n     */\\n    function remove(\\n        UintSet storage set,\\n        uint256 value,\\n        uint256 currentLength\\n    ) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element we delete the last element but\\n            // if the element is not the last one, we swap them first\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = currentLength - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                uint256 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            delete set._values[lastIndex];\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return set._values[index];\\n    }\\n}\\n\",\"keccak256\":\"0x834fa14caaf0ce1c7a876bac4544369f7c8320b536a31759b07a7f6eaa3bd68f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/NFTPositionInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.26;\\n\\nimport '../interfaces/uniswap/INonfungiblePositionManager.sol';\\nimport '../interfaces/uniswap/IUniswapV3Factory.sol';\\nimport '../interfaces/uniswap/IUniswapV3Pool.sol';\\nimport './PoolAddress.sol';\\n\\n/// @notice Encapsulates the logic for getting info about a NFT token ID\\nlibrary NFTPositionInfo {\\n    /// @param factory The address of the Uniswap V3 compatible Factory used in computing the pool address\\n    /// @param nonfungiblePositionManager The address of the nonfungible position manager to query\\n    /// @param tokenId The unique identifier of an Ubeswap V3 LP token\\n    /// @return pool The address of the Uniswap V3 compatible pool\\n    /// @return tickLower The lower tick of the Ubeswap V3 position\\n    /// @return tickUpper The upper tick of the Ubeswap V3 position\\n    /// @return liquidity The amount of liquidity staked\\n    function getPositionInfo(\\n        IUniswapV3Factory factory,\\n        INonfungiblePositionManager nonfungiblePositionManager,\\n        uint256 tokenId\\n    )\\n        internal\\n        view\\n        returns (IUniswapV3Pool pool, int24 tickLower, int24 tickUpper, uint128 liquidity)\\n    {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        (\\n            ,\\n            ,\\n            token0,\\n            token1,\\n            fee,\\n            tickLower,\\n            tickUpper,\\n            liquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = nonfungiblePositionManager.positions(tokenId);\\n\\n        pool = IUniswapV3Pool(\\n            PoolAddress.computeAddress(\\n                address(factory),\\n                PoolAddress.PoolKey({ token0: token0, token1: token1, fee: fee })\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1e53ec8264bc3b696e653540b5dd16636aa3d4185b1bafa0a4ed4b54e95883df\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Taken from @uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\n// uint256 to address conversion is fixed for solidity 0.8 compatibility\\n\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH =\\n        0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({ token0: tokenA, token1: tokenB, fee: fee });\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(\\n        address factory,\\n        PoolKey memory key\\n    ) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex'ff',\\n                            factory,\\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x447a348e7b4a7e1d9f13e3f1030d8ed3425654cee51ddf836c895869293f1638\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061026a5760003560e01c80636fc9907511610153578063c4e9ea52116100cb578063d70549f81161007f578063e376ecf211610064578063e376ecf214610ac8578063e802e7f514610af5578063f192822314610b2957600080fd5b8063d70549f814610a88578063d734e6b114610aa857600080fd5b8063d38d81bb116100b0578063d38d81bb146109c7578063d547741f14610a48578063d5ec446514610a6857600080fd5b8063c4e9ea5214610973578063d308e10e1461099357600080fd5b8063a217fddf11610122578063b02c43d011610107578063b02c43d0146107f2578063b44a2722146108e6578063c45a01551461093f57600080fd5b8063a217fddf146107bd578063ac9650d8146107d257600080fd5b80636fc990751461067657806372f5ca63146106965780637dbe07dc146106b657806391d148541461076c57600080fd5b80632f2ff15d116101e65780633c423f0b116101b557806344e153511161019a57806344e153511461051257806357f6a22a14610532578063607777951461056657600080fd5b80633c423f0b146104d257806343b198a5146104f257600080fd5b80632f2ff15d1461043e57806332e4bb0a1461045e57806336568abe1461049257806338a524cf146104b257600080fd5b8063200581df1161023d578063250a472611610222578063250a4726146103d657806326bfee04146103fe578063272fb2211461041e57600080fd5b8063200581df14610384578063248a9ca3146103a657600080fd5b806301b754401461026f57806301ffc9a7146102b6578063078a4fae146102e6578063150b7a0214610333575b600080fd5b34801561027b57600080fd5b506102a37f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156102c257600080fd5b506102d66102d136600461504b565b610b5d565b60405190151581526020016102ad565b3480156102f257600080fd5b506103066103013660046150af565b610bf6565b604080516fffffffffffffffffffffffffffffffff909316835263ffffffff9091166020830152016102ad565b34801561033f57600080fd5b5061035361034e366004615101565b610e89565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016102ad565b34801561039057600080fd5b506103a461039f366004615345565b611208565b005b3480156103b257600080fd5b506102a36103c1366004615392565b60009081526020819052604090206001015490565b6103e96103e43660046153ab565b61157f565b604080519283526020830191909152016102ad565b34801561040a57600080fd5b506103a46104193660046153c6565b61176e565b34801561042a57600080fd5b506103a461043936600461540f565b61197b565b34801561044a57600080fd5b506103a46104593660046153c6565b611c97565b34801561046a57600080fd5b506102a37fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b44981565b34801561049e57600080fd5b506103a46104ad3660046153c6565b611cc2565b3480156104be57600080fd5b506103a46104cd3660046154dc565b611d20565b3480156104de57600080fd5b506103a46104ed3660046154f9565b611eda565b3480156104fe57600080fd5b506103a461050d3660046155cd565b612271565b34801561051e57600080fd5b506103a461052d3660046155ea565b6122e3565b34801561053e57600080fd5b506102a37f3bd2f1998541a778f2b17a84ff608b734af3ddf06cc43506453ef362dcdf17f181565b34801561057257600080fd5b5061060d610581366004615392565b6002602081905260009182526040909120805460018201549282015460039092015463ffffffff8083169464010000000084048216946801000000000000000085048316946c010000000000000000000000008104909316936fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009485900481169482821692041689565b6040805163ffffffff9a8b168152988a1660208a0152968916968801969096529390961660608601526fffffffffffffffffffffffffffffffff918216608086015260a085015260c0840194909452831660e083015291909116610100820152610120016102ad565b34801561068257600080fd5b506102a3610691366004615617565b612763565b3480156106a257600080fd5b506103a46106b13660046154dc565b612785565b3480156106c257600080fd5b506107376106d1366004615617565b60056020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169063ffffffff70010000000000000000000000000000000082048116917401000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845263ffffffff92831660208501529116908201526060016102ad565b34801561077857600080fd5b506102d66107873660046153c6565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156107c957600080fd5b506102a3600081565b6107e56107e0366004615639565b6128eb565b6040516102ad919061571e565b3480156107fe57600080fd5b5061089f61080d366004615392565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169065ffffffffffff74010000000000000000000000000000000000000000820416907a0100000000000000000000000000000000000000000000000000008104600290810b917d0100000000000000000000000000000000000000000000000000000000009004900b84565b6040805173ffffffffffffffffffffffffffffffffffffffff909516855265ffffffffffff9093166020850152600291820b928401929092520b60608201526080016102ad565b3480156108f257600080fd5b5061091a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102ad565b34801561094b57600080fd5b5061091a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561097f57600080fd5b506103a461098e3660046157a1565b6129fe565b34801561099f57600080fd5b506102a37f000000000000000000000000000000000000000000000000000000000000000081565b3480156109d357600080fd5b506107376109e23660046150af565b60036020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169063ffffffff70010000000000000000000000000000000082048116917401000000000000000000000000000000000000000090041683565b348015610a5457600080fd5b506103a4610a633660046153c6565b6131fe565b348015610a7457600080fd5b506103a4610a8336600461581c565b613223565b348015610a9457600080fd5b506103a4610aa3366004615345565b6136ac565b348015610ab457600080fd5b506103a4610ac33660046155ea565b613e4f565b348015610ad457600080fd5b5060015461091a9073ffffffffffffffffffffffffffffffffffffffff1681565b348015610b0157600080fd5b506102a37f000000000000000000000000000000000000000000000000000000000000000081565b348015610b3557600080fd5b506102a37f892ea130fd6e079bb8cd940bf44abb9be25498d6f215492fb15067ef238b2d5881565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610bf057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000828152600260209081526040808320546003835281842063ffffffff808316808752918552838620845160608101865290546fffffffffffffffffffffffffffffffff81168252700100000000000000000000000000000000810483169682019690965274010000000000000000000000000000000000000000909504811693850184905290938493640100000000909304821692909187161115610e605780516040820151610ca99084906158aa565b63ffffffff16610cb991906158c6565b9450610cc66001856158f1565b600088815260036020908152604080832063ffffffff808616855290835292819020815160608101835290546fffffffffffffffffffffffffffffffff811680835270010000000000000000000000000000000082048616948301949094527401000000000000000000000000000000000000000090049093169083015291955090610db3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e65787420706572696f64206e6f74206578697374730000000000000000000060448201526064015b60405180910390fd5b806040015163ffffffff168763ffffffff161115610e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6e65787420706572696f6420656e64656420746f6f00000000000000000000006044820152606401610daa565b80516040830151610e3e90896158aa565b63ffffffff16610e4e91906158c6565b610e58908761590d565b955050610e7f565b8051610e6c83886158aa565b63ffffffff16610e7c91906158c6565b94505b5050509250929050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610f2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f74206120756e697633206e667400000000000000000000000000000000006044820152606401610daa565b6040517f99fbab8800000000000000000000000000000000000000000000000000000000815260048101859052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906399fbab889060240161018060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf9190615969565b505050505096509650505050505060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff1681526020018360020b81526020018260020b8152506004600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001601a6101000a81548162ffffff021916908360020b62ffffff160217905550606082015181600001601d6101000a81548162ffffff021916908360020b62ffffff1602179055509050508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16877fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f60405160405180910390a483156111db576101208490036111915761118c611186858701876154dc565b87613eea565b6111db565b600061119f85870187615a4b565b905060005b81518110156111d8576111d08282815181106111c2576111c2615ae3565b602002602001015189613eea565b6001016111a4565b50505b507f150b7a0200000000000000000000000000000000000000000000000000000000979650505050505050565b7fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b4496112328161470d565b6000826fffffffffffffffffffffffffffffffff16116112ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f726577617264206d75737420626520706f7369746976650000000000000000006044820152606401610daa565b60006112b98561471a565b600081815260036020908152604080832063ffffffff808a16855290835292819020815160608101835290546fffffffffffffffffffffffffffffffff8116808352700100000000000000000000000000000000820486169483019490945274010000000000000000000000000000000000000000900490931690830152919250906113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f6e6f6e2d6578697374656e7420696e63656e74697665206f7220706572696f646044820152606401610daa565b806020015163ffffffff16421115611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f706572696f6420697320737461727465640000000000000000000000000000006044820152606401610daa565b8060200151816040015161142991906158aa565b6114399063ffffffff1685615b41565b8151829061144890839061590d565b6fffffffffffffffffffffffffffffffff908116909152600084815260036020908152604080832063ffffffff808c16855290835292819020865181549388015192880151851674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff93909516700100000000000000000000000000000000027fffffffffffffffffffffffff0000000000000000000000000000000000000000909416908616179290921716919091179055875161152492509033903090881661474a565b6040805163ffffffff871681526fffffffffffffffffffffffffffffffff8616602082015283917f1c54db607258dd5be63825fa64f13469c14df5e84d5a2cd4b7a57bf005e2b8af91015b60405180910390a2505050505050565b8035600090815260046020526040812054819073ffffffffffffffffffffffffffffffffffffffff16338114611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f6e6c79206f776e65722063616e20636f6c6c656374000000000000000000006044820152606401610daa565b6040517ffc6f786500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fc6f7865903490611685908890600401615b81565b604080518083038185885af11580156116a2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116c79190615c04565b90935091508335337f50edbacae0578a2d5821781b36c7ec80bc02581cf76cb1f7254abde5018d6c7c61170060408801602089016155cd565b6117106060890160408a01615c28565b61172060808a0160608b01615c28565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526fffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a350915091565b3073ffffffffffffffffffffffffffffffffffffffff8216036117ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616e6e6f74207472616e7366657220746f206661726d0000000000000000006044820152606401610daa565b73ffffffffffffffffffffffffffffffffffffffff811661186a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e76616c696420746f206164647265737300000000000000000000000000006044820152606401610daa565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff163381146118f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6f6e6c79206f776e65722063616e207472616e736665720000000000000000006044820152606401610daa565b60008381526004602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff868116918217909255915191929084169186917fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f91a4505050565b60008381526004602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611a08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f6e6c79206f776e65722063616e20636f6c6c656374000000000000000000006044820152606401610daa565b6000611a138561471a565b905060008484604051602001611a459291909182526fffffffffffffffffffffffffffffffff16602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301819052925060009101604051602081830303815290604052805190602001209050611ac0846002600086815260200190815260200160002060010154836147d3565b611b26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610daa565b6000838152600560209081526040808320898452909152812054611b5c906fffffffffffffffffffffffffffffffff1687615c45565b6fffffffffffffffffffffffffffffffff16905060008111611bda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f2072657761726473000000000000000000000000000000000000000000006044820152606401610daa565b60008481526005602090815260408083208a8452909152902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff88161790558751611c3b9030338461474a565b3373ffffffffffffffffffffffffffffffffffffffff1684887f57ae984fe3f294f7f0e5fbef4922a2573552f4bfff61ebc9a6c37f5cedb49ff684604051611c8591815260200190565b60405180910390a45050505050505050565b600082815260208190526040902060010154611cb28161470d565b611cbc83836147e9565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314611d11576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d1b82826148e5565b505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611da1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6f742065787465726e616c5265776172644469737472696275746f720000006044820152606401610daa565b6000611dac8261471a565b60008181526002602052604090206003015490915070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1680611e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f2072657761726473000000000000000000000000000000000000000000006044820152606401610daa565b600082815260026020526040902060030180546fffffffffffffffffffffffffffffffff9081169091558351611e899130903390851661474a565b604080513381526fffffffffffffffffffffffffffffffff8316602082015283917fdf5bb5ca821c02d2066972ec4b3cbfd743de495945f9a0a393328ff8fc0e23a2910160405180910390a2505050565b3073ffffffffffffffffffffffffffffffffffffffff831603611f59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616e6e6f7420776974686472617720746f206661726d0000000000000000006044820152606401610daa565b73ffffffffffffffffffffffffffffffffffffffff8216611fd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e76616c696420746f206164647265737300000000000000000000000000006044820152606401610daa565b6000838152600460209081526040918290208251608081018452905473ffffffffffffffffffffffffffffffffffffffff8116825265ffffffffffff740100000000000000000000000000000000000000008204169282018390527a0100000000000000000000000000000000000000000000000000008104600290810b948301949094527d010000000000000000000000000000000000000000000000000000000000900490920b6060830152156120eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f746f6b656e206973207374616b656400000000000000000000000000000000006044820152606401610daa565b805173ffffffffffffffffffffffffffffffffffffffff16331461216b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6f6e6c79206f776e65722063616e2077697468647261770000000000000000006044820152606401610daa565b6000848152600460205260408082208290558251905173ffffffffffffffffffffffffffffffffffffffff9091169086907fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f908490a46040517fb88d4fde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b88d4fde90612239903090879089908890600401615c6d565b600060405180830381600087803b15801561225357600080fd5b505af1158015612267573d6000803e3d6000fd5b5050505050505050565b7f3bd2f1998541a778f2b17a84ff608b734af3ddf06cc43506453ef362dcdf17f161229b8161470d565b50600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff163314612370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f6e6c79206f776e65722063616e20756e7374616b65000000000000000000006044820152606401610daa565b600061237b8361471a565b6000818152600560209081526040808320868452909152902054909150700100000000000000000000000000000000900463ffffffff16612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6b656e206e6f74207374616b6564000000000000000000000000000000006044820152606401610daa565b600081815260026020818152604092839020835161012081018552815463ffffffff808216835264010000000082048116948301949094526801000000000000000081048416958201959095526c01000000000000000000000000850483166060808301919091526fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009687900481166080840152600184015460a08401529483015460c083015260039092015480851660e08301529490940490921661010084015290850151161561259657600082815260056020908152604080832086845290915290205461252490700100000000000000000000000000000000900463ffffffff1642615cbe565b846060015163ffffffff1610612596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f746f6b656e206c6f636b656400000000000000000000000000000000000000006044820152606401610daa565b606081015160008381526006602052604090206125be91859063ffffffff908116906149a016565b506040805160608101825260008481526005602090815283822087835280825284832080546fffffffffffffffffffffffffffffffff80821687528487018681528789018781528c885294865296519651935196167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161770010000000000000000000000000000000063ffffffff93841602177fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000092909516820294909417909355600490529190912080549190910465ffffffffffff169060146126bb83615cd1565b825465ffffffffffff9182166101009390930a9283029190920219909116179055506000828152600260205260409020805463ffffffff6c010000000000000000000000009091041690600c61271083615d11565b91906101000a81548163ffffffff021916908363ffffffff1602179055505081837fe1ba67e807ae0efa0a9549f9520ddc15c27f0a4dae2bc045e800ca66a940778f60405160405180910390a350505050565b60008281526006602090815260408083208484529091528120545b9392505050565b7f3bd2f1998541a778f2b17a84ff608b734af3ddf06cc43506453ef362dcdf17f16127af8161470d565b60006127ba8361471a565b6000818152600260205260409020600301549091506fffffffffffffffffffffffffffffffff1680612848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f2065786365737320726577617264730000000000000000000000000000006044820152606401610daa565b600082815260026020526040902060030180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055835161289e90336fffffffffffffffffffffffffffffffff8416614a3b565b6040516fffffffffffffffffffffffffffffffff8216815282907f7eba82e262e7cca68a380d1237f71bc407029792e9c6222b40e9f65d6d22d0519060200160405180910390a250505050565b60608167ffffffffffffffff811115612906576129066151a2565b60405190808252806020026020018201604052801561293957816020015b60608152602001906001900390816129245790505b50905060005b828110156129f7576000803086868581811061295d5761295d615ae3565b905060200281019061296f9190615d27565b60405161297d929190615d93565b600060405180830381855af49150503d80600081146129b8576040519150601f19603f3d011682016040523d82523d6000602084013e6129bd565b606091505b5091509150816129cf57805160208201fd5b808484815181106129e2576129e2615ae3565b6020908102919091010152505060010161293f565b5092915050565b7f892ea130fd6e079bb8cd940bf44abb9be25498d6f215492fb15067ef238b2d58612a288161470d565b428763ffffffff1610612a97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f74696d65206d757374206265206265666f7265206e6f770000000000000000006044820152606401610daa565b600088815260026020818152604092839020835161012081018552815463ffffffff8082168352640100000000820481169483018590526801000000000000000082048116968301969096526c01000000000000000000000000810490951660608201526fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009586900481166080830152600183015460a08301529382015460c082015260039091015480841660e083015293909304909116610100830152612bbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e6f6e2d6578697374656e7420696e63656e74697665000000000000000000006044820152606401610daa565b806020015163ffffffff168863ffffffff1611612c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f74696d657374616d70203e206c61737455706461746554696d650000000000006044820152606401610daa565b600080612c438b8b610bf6565b90925090506000612c54868861590d565b9050806fffffffffffffffffffffffffffffffff16600003612d8357898460a0015114612cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e76616c6964206d65726b6c65526f6f7400000000000000000000000000006044820152606401610daa565b6fffffffffffffffffffffffffffffffff881615612d57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f726577617264206d7573742062652030000000000000000000000000000000006044820152606401610daa565b828460e001818151612d69919061590d565b6fffffffffffffffffffffffffffffffff16905250612f5f565b898460a0015103612df0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f73616d65206d65726b6c65526f6f7400000000000000000000000000000000006044820152606401610daa565b888460c0015103612e5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f73616d65206970667348617368000000000000000000000000000000000000006044820152606401610daa565b826fffffffffffffffffffffffffffffffff16886fffffffffffffffffffffffffffffffff1614612eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c6964207265776172640000000000000000000000000000000000006044820152606401610daa565b806fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16612f2d9190615da3565b612f379190615dba565b8461010001818151612f49919061590d565b6fffffffffffffffffffffffffffffffff169052505b63ffffffff82168452608084018051849190612f7c90839061590d565b9150906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508a846020019063ffffffff16908163ffffffff1681525050898460a0018181525050888460c001818152505083600260008e815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060a0820151816001015560c0820151816002015560e08201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506101008201518160030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050508b7ffb09160bccd8fb0b8cba9a5467ab242832f6571db72c38d905bb404964cb310f8c86600001518d8d888d8d6040516131e8979695949392919063ffffffff9788168152959096166020860152604085019390935260608401919091526fffffffffffffffffffffffffffffffff908116608084015290811660a08301529190911660c082015260e00190565b60405180910390a2505050505050505050505050565b6000828152602081905260409020600101546132198161470d565b611cbc83836148e5565b7fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b44961324d8161470d565b6000826fffffffffffffffffffffffffffffffff16116132c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f726577617264206d75737420626520706f7369746976650000000000000000006044820152606401610daa565b60008363ffffffff1611613339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6475726174696f6e206d75737420626520706f736974697665000000000000006044820152606401610daa565b7f00000000000000000000000000000000000000000000000000000000000000008363ffffffff1611156133c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f696e63656e74697665206475726174696f6e20697320746f6f206c6f6e6700006044820152606401610daa565b60006133d48661471a565b60008181526002602052604090205490915068010000000000000000900463ffffffff168061345f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e6f6e2d6578697374656e7420696e63656e74697665000000000000000000006044820152606401610daa565b61346a6001876158aa565b60008381526002602052604090205463ffffffff9081169116146134ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f77726f6e6720706572696f6420696400000000000000000000000000000000006044820152606401610daa565b60006134f686836158f1565b905060405180606001604052808763ffffffff16876135159190615b41565b6fffffffffffffffffffffffffffffffff908116825263ffffffff80861660208085019190915285821660409485018190526000898152600383528581208e851682528352858120875181548986015199890151871674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9a909716700100000000000000000000000000000000027fffffffffffffffffffffffff00000000000000000000000000000000000000009091169188169190911717979097169390931790955587825260029052919091208054680100000000000000009093027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff9093169290921790915588516136479133903090891661474a565b6040805163ffffffff8981168252881660208201526fffffffffffffffffffffffffffffffff871681830152905184917f41f9f71cb1c8d0d8942fc1650ce24a291260a0ed8f1e05838001d2d93e2f8f94919081900360600190a25050505050505050565b7f3bd2f1998541a778f2b17a84ff608b734af3ddf06cc43506453ef362dcdf17f16136d68161470d565b60008385604001516136e891906158f1565b90506000836fffffffffffffffffffffffffffffffff1611613766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f726577617264206d75737420626520706f7369746976650000000000000000006044820152606401610daa565b60008463ffffffff16116137d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6475726174696f6e206d75737420626520706f736974697665000000000000006044820152606401610daa565b846040015163ffffffff1642111561384a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f737461727454696d65206d757374206265206166746572206e6f7700000000006044820152606401610daa565b7f000000000000000000000000000000000000000000000000000000000000000042866040015163ffffffff166138819190615cbe565b11156138e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f73746172742074696d6520746f6f2066617220696e746f2066757475726500006044820152606401610daa565b7f00000000000000000000000000000000000000000000000000000000000000008463ffffffff161115613979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f696e63656e74697665206475726174696f6e20697320746f6f206c6f6e6700006044820152606401610daa565b7f0000000000000000000000000000000000000000000000000000000000000000856060015163ffffffff161115613a0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f77726f6e67206c6f636b2074696d6500000000000000000000000000000000006044820152606401610daa565b8460c0015160020b8560a0015160020b13613a84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77726f6e67207469636b4c6f7765722072616e676500000000000000000000006044820152606401610daa565b84610100015160020b8560e0015160020b13613afc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77726f6e67207469636b55707065722072616e676500000000000000000000006044820152606401610daa565b6000613b078661471a565b60008181526002602052604090205490915068010000000000000000900463ffffffff1615613b92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e63656e7469766520616c72656164792065786973747300000000000000006044820152606401610daa565b6000818152600260205260409081902080548883015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff8288166801000000000000000002167fffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffff90931692909217919091179091558151606081019092528190613c2d90881687615b41565b6fffffffffffffffffffffffffffffffff90811682526040808a015163ffffffff90811660208086019190915287821694830194909452600086815260038552828120818052855282902085518154958701519690930151821674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff96909216700100000000000000000000000000000000027fffffffffffffffffffffffff0000000000000000000000000000000000000000909516928416929092179390931793909316919091179091558651613d219133903090881661474a565b856020015173ffffffffffffffffffffffffffffffffffffffff16866000015173ffffffffffffffffffffffffffffffffffffffff16827f03017909c0b50d1b7b5f231d80b878a986af7762beef7561e98d1f2512d8638d89604001518a606001518b608001518c60a001518d60c001518e60e001518f6101000151604051613ded979695949392919063ffffffff9788168152959096166020860152600293840b604086015291830b6060850152820b6080840152810b60a08301529190910b60c082015260e00190565b60405180910390a4604080516000815263ffffffff871660208201526fffffffffffffffffffffffffffffffff86169181019190915281907f41f9f71cb1c8d0d8942fc1650ce24a291260a0ed8f1e05838001d2d93e2f8f949060600161156f565b60008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff163314613edc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6f6e6c79206f776e65722063616e207374616b6520746f6b656e0000000000006044820152606401610daa565b613ee68282613eea565b5050565b6000613ef58361471a565b60008181526002602052604090205490915063ffffffff6801000000000000000082048116916c0100000000000000000000000090041681613f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e6f6e2d6578697374656e7420696e63656e74697665000000000000000000006044820152606401610daa565b846040015163ffffffff164210158015613fb257508163ffffffff1642105b614018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e63656e74697665206e6f74206163746976650000000000000000000000006044820152606401610daa565b6000838152600560209081526040808320878452909152902054700100000000000000000000000000000000900463ffffffff16156140b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f6b656e20616c7265616479207374616b65640000000000000000000000006044820152606401610daa565b6000806000806141047f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a614a79565b9350935093509350886020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146141ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f746f6b656e20706f6f6c206973206e6f742074686520696e63656e746976652060448201527f706f6f6c000000000000000000000000000000000000000000000000000000006064820152608401610daa565b6141d48383615dce565b60020b896080015160020b1315614247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e67207469636b2072616e6765000000000000000000000000000000006044820152606401610daa565b8260020b8960a0015160020b1215801561426b57508260020b8960c0015160020b13155b6142d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f77726f6e67207469636b4c6f77657200000000000000000000000000000000006044820152606401610daa565b8160020b8960e0015160020b121580156142f657508160020b89610100015160020b13155b61435c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f77726f6e67207469636b557070657200000000000000000000000000000000006044820152606401610daa565b6000816fffffffffffffffffffffffffffffffff16116143fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f63616e6e6f74207374616b6520746f6b656e20776974682030206c697175696460448201527f69747900000000000000000000000000000000000000000000000000000000006064820152608401610daa565b6000878152600660205260409020614420908963ffffffff80891690614b6c16565b506000888152600460205260409020805474010000000000000000000000000000000000000000900465ffffffffffff1690601461445d83615e0f565b825465ffffffffffff9182166101009390930a9283029190920219909116179055506000878152600260205260409020805463ffffffff6c010000000000000000000000009091041690600c6144b283615e38565b825463ffffffff9182166101009390930a9283029190920219909116179055506040517fa38807f2000000000000000000000000000000000000000000000000000000008152600284810b600483015283900b602482015260009073ffffffffffffffffffffffffffffffffffffffff86169063a38807f290604401606060405180830381865afa15801561454b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061456f9190615e54565b925050506040518060600160405280600560008b815260200190815260200160002060008c815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020014263ffffffff1681526020018263ffffffff16815250600560008a815260200190815260200160002060008b815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555090505087897f9aeb7974ad257732a0bf7647a460a1a36f696e4466be2548ff67d42ac07de00584846040516146f99291906fffffffffffffffffffffffffffffffff92909216825263ffffffff16602082015260400190565b60405180910390a350505050505050505050565b6147178133614bc2565b50565b60008160405160200161472d9190615e9c565b604051602081830303815290604052805190602001209050919050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052611cbc9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614c48565b6000826147e08584614cde565b14949350505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff166148dd5760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561487b3390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610bf0565b506000610bf0565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16156148dd5760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610bf0565b60008281526001840160205260408120548015614a315760006149c4600183615cbe565b905060006149d3600186615cbe565b9050808214614a045760008181526020888152604080832054858452818420819055835260018a0190915290208390555b6000908152602087815260408083208390558783526001808a01909252822091909155925061277e915050565b600091505061277e565b60405173ffffffffffffffffffffffffffffffffffffffff838116602483015260448201839052611d1b91859182169063a9059cbb9060640161478c565b60008060008060008060008873ffffffffffffffffffffffffffffffffffffffff166399fbab88896040518263ffffffff1660e01b8152600401614abf91815260200190565b61018060405180830381865afa158015614add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b019190615969565b50506040805160608101825273ffffffffffffffffffffffffffffffffffffffff808b1682528916602082015262ffffff881691810191909152949f50929d50909b50949950929750909550614b5e94508e93509150614d219050565b965050505093509350935093565b6000828152600184016020526040812054614bba576000828152602085905260409020839055614b9d826001615f7e565b60008481526001808701602052604090912091909155905061277e565b50600061277e565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16613ee6576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610daa565b6000614c6a73ffffffffffffffffffffffffffffffffffffffff841683614e7a565b90508051600014158015614c8f575080806020019051810190614c8d9190615f91565b155b15611d1b576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610daa565b600081815b8451811015614d1957614d0f82868381518110614d0257614d02615ae3565b6020026020010151614e88565b9150600101614ce3565b509392505050565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610614d6357600080fd5b8151602080840151604080860151815173ffffffffffffffffffffffffffffffffffffffff95861681860152949092168482015262ffffff90911660608085019190915281518085038201815260808501909252815191909201207fff0000000000000000000000000000000000000000000000000000000000000060a08401529085901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d582015260f501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b606061277e83836000614eb7565b6000818310614ea457600082815260208490526040902061277e565b600083815260208390526040902061277e565b606081471015614ef5576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610daa565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051614f1e9190615fb3565b60006040518083038185875af1925050503d8060008114614f5b576040519150601f19603f3d011682016040523d82523d6000602084013e614f60565b606091505b5091509150614f70868383614f7a565b9695505050505050565b606082614f8f57614f8a82615009565b61277e565b8151158015614fb3575073ffffffffffffffffffffffffffffffffffffffff84163b155b15615002576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610daa565b508061277e565b8051156150195780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561505d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461277e57600080fd5b63ffffffff8116811461471757600080fd5b80356150aa8161508d565b919050565b600080604083850312156150c257600080fd5b8235915060208301356150d48161508d565b809150509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461471757600080fd5b60008060008060006080868803121561511957600080fd5b8535615124816150df565b94506020860135615134816150df565b935060408601359250606086013567ffffffffffffffff81111561515757600080fd5b8601601f8101881361516857600080fd5b803567ffffffffffffffff81111561517f57600080fd5b88602082840101111561519157600080fd5b959894975092955050506020019190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156151f5576151f56151a2565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715615242576152426151a2565b604052919050565b80356150aa816150df565b8060020b811461471757600080fd5b80356150aa81615255565b6000610120828403121561528257600080fd5b61528a6151d1565b90506152958261524a565b81526152a36020830161524a565b60208201526152b46040830161509f565b60408201526152c56060830161509f565b60608201526152d660808301615264565b60808201526152e760a08301615264565b60a08201526152f860c08301615264565b60c082015261530960e08301615264565b60e082015261531b6101008301615264565b61010082015292915050565b6fffffffffffffffffffffffffffffffff8116811461471757600080fd5b6000806000610160848603121561535b57600080fd5b615365858561526f565b92506101208401356153768161508d565b915061014084013561538781615327565b809150509250925092565b6000602082840312156153a457600080fd5b5035919050565b600060808284031280156153be57600080fd5b509092915050565b600080604083850312156153d957600080fd5b8235915060208301356150d4816150df565b600067ffffffffffffffff821115615405576154056151a2565b5060051b60200190565b600080600080610180858703121561542657600080fd5b615430868661526f565b9350610120850135925061014085013561544981615327565b915061016085013567ffffffffffffffff81111561546657600080fd5b8501601f8101871361547757600080fd5b803561548a615485826153eb565b6151fb565b8082825260208201915060208360051b8501019250898311156154ac57600080fd5b6020840193505b828410156154ce5783358252602093840193909101906154b3565b969995985093965050505050565b600061012082840312156154ef57600080fd5b61277e838361526f565b60008060006060848603121561550e57600080fd5b833592506020840135615520816150df565b9150604084013567ffffffffffffffff81111561553c57600080fd5b8401601f8101861361554d57600080fd5b803567ffffffffffffffff811115615567576155676151a2565b61559860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016151fb565b8181528760208385010111156155ad57600080fd5b816020840160208301376000602083830101528093505050509250925092565b6000602082840312156155df57600080fd5b813561277e816150df565b60008061014083850312156155fe57600080fd5b615608848461526f565b94610120939093013593505050565b6000806040838503121561562a57600080fd5b50508035926020909101359150565b6000806020838503121561564c57600080fd5b823567ffffffffffffffff81111561566357600080fd5b8301601f8101851361567457600080fd5b803567ffffffffffffffff81111561568b57600080fd5b8560208260051b84010111156156a057600080fd5b6020919091019590945092505050565b60005b838110156156cb5781810151838201526020016156b3565b50506000910152565b600081518084526156ec8160208601602086016156b0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015615795577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526157808583516156d4565b94506020938401939190910190600101615746565b50929695505050505050565b600080600080600080600060e0888a0312156157bc57600080fd5b8735965060208801356157ce8161508d565b9550604088013594506060880135935060808801356157ec81615327565b925060a08801356157fc81615327565b915060c088013561580c81615327565b8091505092959891949750929550565b600080600080610180858703121561583357600080fd5b61583d868661526f565b935061012085013561584e8161508d565b925061014085013561585f8161508d565b915061016085013561587081615327565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b63ffffffff8281168282160390811115610bf057610bf061587b565b6fffffffffffffffffffffffffffffffff81811683821602908116908181146129f7576129f761587b565b63ffffffff8181168382160190811115610bf057610bf061587b565b6fffffffffffffffffffffffffffffffff8181168382160190811115610bf057610bf061587b565b80516150aa816150df565b805162ffffff811681146150aa57600080fd5b80516150aa81615255565b80516150aa81615327565b6000806000806000806000806000806000806101808d8f03121561598c57600080fd5b8c516bffffffffffffffffffffffff811681146159a857600080fd5b9b506159b660208e01615935565b9a506159c460408e01615935565b99506159d260608e01615935565b98506159e060808e01615940565b97506159ee60a08e01615953565b96506159fc60c08e01615953565b9550615a0a60e08e0161595e565b6101008e01516101208f015191965094509250615a2a6101408e0161595e565b9150615a396101608e0161595e565b90509295989b509295989b509295989b565b600060208284031215615a5d57600080fd5b813567ffffffffffffffff811115615a7457600080fd5b8201601f81018413615a8557600080fd5b8035615a93615485826153eb565b8082825260208201915060206101208402850101925086831115615ab657600080fd5b6020840193505b82841015614f7057615acf878561526f565b825260208201915061012084019350615abd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006fffffffffffffffffffffffffffffffff831680615b6357615b63615b12565b806fffffffffffffffffffffffffffffffff84160491505092915050565b81358152608081016020830135615b97816150df565b73ffffffffffffffffffffffffffffffffffffffff1660208301526040830135615bc081615327565b6fffffffffffffffffffffffffffffffff1660408301526060830135615be581615327565b6fffffffffffffffffffffffffffffffff811660608401525092915050565b60008060408385031215615c1757600080fd5b505080516020909101519092909150565b600060208284031215615c3a57600080fd5b813561277e81615327565b6fffffffffffffffffffffffffffffffff8281168282160390811115610bf057610bf061587b565b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152826040820152608060608201526000614f7060808301846156d4565b81810381811115610bf057610bf061587b565b600065ffffffffffff821680615ce957615ce961587b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600063ffffffff821680615ce957615ce961587b565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615d5c57600080fd5b83018035915067ffffffffffffffff821115615d7757600080fd5b602001915036819003821315615d8c57600080fd5b9250929050565b8183823760009101908152919050565b8082028115828204841417610bf057610bf061587b565b600082615dc957615dc9615b12565b500490565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff82131715610bf057610bf061587b565b600065ffffffffffff821665ffffffffffff8103615e2f57615e2f61587b565b60010192915050565b600063ffffffff821663ffffffff8103615e2f57615e2f61587b565b600080600060608486031215615e6957600080fd5b83518060060b8114615e7a57600080fd5b6020850151909350615e8b816150df565b60408501519092506153878161508d565b815173ffffffffffffffffffffffffffffffffffffffff168152602080830151610120830191615ee39084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151615efb604084018263ffffffff169052565b506060830151615f13606084018263ffffffff169052565b506080830151615f28608084018260020b9052565b5060a0830151615f3d60a084018260020b9052565b5060c0830151615f5260c084018260020b9052565b5060e0830151615f6760e084018260020b9052565b506101008301516129f761010084018260020b9052565b80820180821115610bf057610bf061587b565b600060208284031215615fa357600080fd5b8151801515811461277e57600080fd5b60008251615fc58184602087016156b0565b919091019291505056fea164736f6c634300081a000a",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "DepositTransferred(uint256,address,address)": {
        "params": {
          "newOwner": "The owner after the deposit was transferred",
          "oldOwner": "The owner before the deposit was transferred",
          "tokenId": "The ID of the deposit (and token) that is being transferred"
        }
      },
      "ExcessRewardsRefunded(bytes32,uint128)": {
        "params": {
          "incentiveId": "The incentive which has excess rewards"
        }
      },
      "ExternalRewardCollected(bytes32,address,uint256)": {
        "params": {
          "incentiveId": "The incentive",
          "reward": "The amount of reward tokens claimed",
          "to": "externalRewardDistributor address at the time on transaction"
        }
      },
      "FeeCollected(address,uint256,address,uint128,uint128)": {
        "params": {
          "owner": "Owner account of the deposited token when the fee collected",
          "recipient": "Fee recepient",
          "tokenId": "The unique identifier of an Ubeswap V3 LP token"
        }
      },
      "IncentiveCreated(bytes32,address,address,uint32,uint32,int24,int24,int24,int24,int24)": {
        "params": {
          "lockTime": "Minimum time that is required for unstaking a position",
          "maxTickLower": "Maximum value of tickLower for a position to be staked",
          "maxTickUpper": "Maximum value of tickUpper for a position to be staked",
          "minTickLower": "Minimum value of tickLower for a position to be staked",
          "minTickUpper": "Minimum value of tickUpper for a position to be staked",
          "minimumTickRange": "Minimum value of (tickUpper - tickLower) for a position to be staked",
          "pool": "The Uniswap V3 compatible pool",
          "rewardToken": "The token being distributed as a reward",
          "startTime": "The time when the incentive program begins"
        }
      },
      "RewardCollected(uint256,bytes32,address,uint256)": {
        "params": {
          "incentiveId": "The incentive",
          "reward": "The amount of reward tokens claimed",
          "to": "The address where claimed rewards were sent to",
          "tokenId": "The unique identifier of an Ubeswap V3 LP token"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TokenStaked(uint256,bytes32,uint128,uint32)": {
        "params": {
          "incentiveId": "The incentive in which the token is staking",
          "liquidity": "The amount of liquidity staked",
          "tokenId": "The unique identifier of an Ubeswap V3 LP token"
        }
      },
      "TokenUnstaked(uint256,bytes32)": {
        "params": {
          "incentiveId": "The incentive in which the token is staking",
          "tokenId": "The unique identifier of an Ubeswap V3 LP token"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "collectReward((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256,uint128,bytes32[])": {
        "params": {
          "accumulatedRewards": "accumulated rewards for the position",
          "key": "The key of the incentive for which to unstake the NFT",
          "proof": "Merkle proof for rewards",
          "tokenId": "The ID of the token that has rewards"
        }
      },
      "constructor": {
        "params": {
          "_factory": "the Uniswap V3 compatible factory",
          "_maxIncentivePeriodDuration": "the max amount of seconds into the future the incentive startTime can be set",
          "_maxIncentiveStartLeadTime": "the max duration of an incentive in seconds",
          "_nonfungiblePositionManager": "the NFT position manager contract address"
        }
      },
      "createIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint128)": {
        "params": {
          "duration": "The amount of seconds for the first period",
          "key": "Details of the incentive to create",
          "reward": "The amount of reward tokens to be distributed on the first period"
        }
      },
      "extendIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint32,uint128)": {
        "params": {
          "duration": "The amount of seconds for the new period",
          "key": "Details of the incentive to extend",
          "newPeriodId": "the id for the new period. It should be one more from the previous period. This is taken for security",
          "reward": "The amount of reward tokens to be distributed on the new period"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      },
      "refundExcessRewards((address,address,uint32,uint32,int24,int24,int24,int24,int24))": {
        "params": {
          "key": "Details of the incentive to end"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "stakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)": {
        "params": {
          "key": "The key of the incentive for which to stake the NFT",
          "tokenId": "The ID of the token to stake"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferDeposit(uint256,address)": {
        "params": {
          "to": "The new owner of the deposit",
          "tokenId": "The ID of the token (and the deposit) to transfer"
        }
      },
      "unstakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)": {
        "params": {
          "key": "The key of the incentive for which to unstake the NFT",
          "tokenId": "The ID of the token to unstake"
        }
      },
      "updateIncentiveDistributionInfo(bytes32,uint32,bytes32,bytes32,uint128,uint128,uint128)": {
        "params": {
          "incentiveId": "The ID of the incentive to be updated",
          "timestamp": "The timestamp of the block that the calculation is done on"
        }
      },
      "withdrawToken(uint256,address,bytes)": {
        "params": {
          "data": "An optional data array that will be passed along to the `to` address via the NFT safeTransferFrom",
          "to": "The address where the LP token will be sent",
          "tokenId": "The unique identifier of an Ubeswap V3 LP token"
        }
      }
    },
    "stateVariables": {
      "deposits": {
        "details": "deposits[tokenId] => Deposit"
      },
      "incentivePeriods": {
        "details": "incentivePeriods[incentiveId][periodId] => IncentivePeriod"
      },
      "incentives": {
        "details": "bytes32 refers to the return value of IncentiveId.compute"
      },
      "stakes": {
        "details": "stakes[incentiveId][tokenId] => Stake"
      }
    },
    "title": "Off-chain assisted Ubeswap V3 Farming Protocol",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositTransferred(uint256,address,address)": {
        "notice": "Emitted when ownership of a deposit changes"
      },
      "ExcessRewardsRefunded(bytes32,uint128)": {
        "notice": "Event that can be emitted when excess rewards refunded"
      },
      "ExternalRewardCollected(bytes32,address,uint256)": {
        "notice": "Event emitted when externalRewardDistributor contract collects reward"
      },
      "FeeCollected(address,uint256,address,uint128,uint128)": {
        "notice": "Event emitted when a fee collected from a pool"
      },
      "IncentiveCreated(bytes32,address,address,uint32,uint32,int24,int24,int24,int24,int24)": {
        "notice": "Event emitted when a liquidity mining incentive has been created"
      },
      "RewardCollected(uint256,bytes32,address,uint256)": {
        "notice": "Event emitted when a reward collected for an incentive"
      },
      "TokenStaked(uint256,bytes32,uint128,uint32)": {
        "notice": "Event emitted when a Ubeswap V3 LP token has been staked"
      },
      "TokenUnstaked(uint256,bytes32)": {
        "notice": "Event emitted when a Ubeswap V3 LP token has been unstaked"
      }
    },
    "kind": "user",
    "methods": {
      "collectExternalReward((address,address,uint32,uint32,int24,int24,int24,int24,int24))": {
        "notice": "Transfers the rewards that are accumulated for the external reward distributor"
      },
      "collectReward((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256,uint128,bytes32[])": {
        "notice": "Transfers the rewards that are accumulated for the token in the incentive"
      },
      "createIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint128)": {
        "notice": "Creates a new liquidity mining incentive program"
      },
      "extendIncentive((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint32,uint128)": {
        "notice": "Creates a new period for the incentive"
      },
      "externalRewardDistributor()": {
        "notice": "Address of the external reward distributor for the liquidity managers"
      },
      "factory()": {
        "notice": "The Uniswap V3 compatible Factory"
      },
      "increasePeriodReward((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint32,uint128)": {
        "notice": "Add reward for already created and not started period"
      },
      "maxIncentivePeriodDuration()": {
        "notice": "The max duration of an incentive in seconds"
      },
      "maxIncentiveStartLeadTime()": {
        "notice": "The max amount of seconds into the future the incentive startTime can be set"
      },
      "maxLockTime()": {
        "notice": "The max duration oc lock time that can be given to an incentive"
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      },
      "nonfungiblePositionManager()": {
        "notice": "The nonfungible position manager with which this staking contract is compatible"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Upon receiving a Ubeswap V3 ERC721, creates the token deposit setting owner to `from`. Also stakes token in one or more incentives if properly formatted `data` has a length > 0."
      },
      "refundExcessRewards((address,address,uint32,uint32,int24,int24,int24,int24,int24))": {
        "notice": "Refunds excess rewards for the given incentive"
      },
      "stakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)": {
        "notice": "Stakes a Ubeswap V3 LP token"
      },
      "transferDeposit(uint256,address)": {
        "notice": "Transfers ownership of a deposit from the sender to the given recipient"
      },
      "unstakeToken((address,address,uint32,uint32,int24,int24,int24,int24,int24),uint256)": {
        "notice": "Unstakes a Ubeswap V3 LP token"
      },
      "updateExternalRewardDistributor(address)": {
        "notice": "Update function for externalRewardDistributor"
      },
      "updateIncentiveDistributionInfo(bytes32,uint32,bytes32,bytes32,uint128,uint128,uint128)": {
        "notice": "Update function for total liqudity seconds that is calculated off-chain"
      },
      "withdrawToken(uint256,address,bytes)": {
        "notice": "Withdraws a Ubeswap V3 LP token `tokenId` from this contract to the recipient `to`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 2011,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "externalRewardDistributor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2018,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "incentives",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Incentive)1960_storage)"
      },
      {
        "astId": 2027,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "incentivePeriods",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint32,t_struct(IncentivePeriod)1967_storage))"
      },
      {
        "astId": 2034,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "deposits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Deposit)1977_storage)"
      },
      {
        "astId": 2043,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "stakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Stake)1985_storage))"
      },
      {
        "astId": 2048,
        "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
        "label": "_stakedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(UintSet)5014_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Stake)1985_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => struct UbeswapV3Farming.Stake))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Stake)1985_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint32,t_struct(IncentivePeriod)1967_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint32 => struct UbeswapV3Farming.IncentivePeriod))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(IncentivePeriod)1967_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Incentive)1960_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UbeswapV3Farming.Incentive)",
        "numberOfBytes": "32",
        "value": "t_struct(Incentive)1960_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_struct(UintSet)5014_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct KnownLengthSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)5014_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)1977_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UbeswapV3Farming.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)1977_storage"
      },
      "t_mapping(t_uint256,t_struct(Stake)1985_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UbeswapV3Farming.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1985_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(IncentivePeriod)1967_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct UbeswapV3Farming.IncentivePeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(IncentivePeriod)1967_storage"
      },
      "t_struct(Deposit)1977_storage": {
        "encoding": "inplace",
        "label": "struct UbeswapV3Farming.Deposit",
        "members": [
          {
            "astId": 1970,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1972,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "numberOfStakes",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1974,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "tickLower",
            "offset": 26,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 1976,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "tickUpper",
            "offset": 29,
            "slot": "0",
            "type": "t_int24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Incentive)1960_storage": {
        "encoding": "inplace",
        "label": "struct UbeswapV3Farming.Incentive",
        "members": [
          {
            "astId": 1943,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "currentPeriodId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1945,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "lastUpdateTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1947,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "endTime",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1949,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "numberOfStakes",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1951,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "distributedRewards",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1953,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1955,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1957,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "excessRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 1959,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "externalRewards",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(IncentivePeriod)1967_storage": {
        "encoding": "inplace",
        "label": "struct UbeswapV3Farming.IncentivePeriod",
        "members": [
          {
            "astId": 1962,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1964,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "startTime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1966,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "endTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)1985_storage": {
        "encoding": "inplace",
        "label": "struct UbeswapV3Farming.Stake",
        "members": [
          {
            "astId": 1980,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "claimedReward",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1982,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "stakeTime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1984,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "initialSecondsInside",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)5014_storage": {
        "encoding": "inplace",
        "label": "struct KnownLengthSet.UintSet",
        "members": [
          {
            "astId": 5009,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5013,
            "contract": "contracts/UbeswapV3Farming.sol:UbeswapV3Farming",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}